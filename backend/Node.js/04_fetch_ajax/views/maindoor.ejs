<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>동적 폼(ajax, axios, fetch)</title>
    <script
      src="https://code.jquery.com/jquery-3.7.1.min.js"
      integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo="
      crossorigin="anonymous"
    ></script>
    <!-- 제이쿼리 CDN -->
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
    <style>
      .result {
        border: 2px solid pink;
      }
    </style>
  </head>
  <body>
    <h1>동적 폼 전송 연습하기</h1>
    <!-- 동적 폼으로 전송할 때는 form에 action과 method를 쓰면 안 된다. -->
    <form name="register">
      <label for="name">이름: </label>
      <input type="text" name="name" id="name" required />
      <br />
      <!-- 라디오는 required를 둘 중 하나에만 달아도 된다. -->
      <!-- required 걸린 쪽만 선택하라는 의미가 아니다. -->
      <!-- ajax로 전송하는 경우 required가 소용이 없다. 동작하지 않는다. -->
      <span>성별</span>
      <input type="radio" name="gender" id="male" value="남성" required />
      <label for="male">남자</label>
      <input type="radio" name="gender" id="female" value="여성" />
      <label for="female">여자</label>
      <br /><br />
      <button type="button" onclick="ajaxGet()">Ajax GET</button>
      <button type="button" onclick="ajaxPost()">Ajax POST</button>
      <br />
      <button type="button" onclick="axiosGet()">Axios GET</button>
      <button type="button" onclick="axiosPost()">Axios POST</button>
      <br />
      <button type="button" onclick="fetchGet()">fetch GET</button>
      <button type="button" onclick="fetchPost()">fetch POST</button>
    </form>
    <!-- 결과란 -->
    <div class="result"></div>
    <!-- 자바스크립트 -->
    <a href="/api"> 외부 API 사용</a>
    <a href="/practice01">실습1_axios get</a>
    <a href="/practice02">실습2_axios post</a>

    <script>
      //엄청 기니까 접었다 폈다 해 주자.
      const resBox = document.querySelector(".result");

      function ajaxGet() {
        const form = document.forms["register"]; //이름이 register인 forms 선택

        // console.log(form);
        // console.log(form.name);
        // console.log(form.gender);
        // console.log(form.gender[0].value);
        // console.log(form.gender[1].value);

        //유효성 검사
        // if (form.name.value.trim() === "") {
        //   alert("이름 쓰세요.");
        //   return false;
        // } else if (form.gender.value === "") {
        //   alert("성별을 입력하세요.");
        //   return false;
        // } else {
        //   confirm("통과");
        //   return true;
        // }

        //ajax 요청 보내기
        //이것도 app.js에서 설정을 해 주긴 해야 한다.
        //보낼 데이터를 일단 객체 형태로 만들어야 한다.
        //키의 이름은 마음대로 정해도 된다.
        const dataPack = {
          name: form.name.value,
          gender: form.gender.value,
        };
        //ajax 작성
        $.ajax({
          type: "get", //어떤 메소드로 보낼지 작성한다.
          url: "/ajaxGetTest", //form의 action에 대응된다. 어디로 보낼지 작성한다.
          data: dataPack, //서버로 넘겨줄 데이터를 작성한다. 쿼리로 넘긴다.
          //통신이 성공한 경우, 실패한 경우
          success: function (res) {
            //통신 이후에 일어날 일들을 여기 적어준다.
            console.log(res);
            resBox.textContent = `GET /ajax 요청 완료! ${dataPack.name}의 성별은 ${dataPack.gender}`;
          },
          fail: function (err) {
            console.log("error 내용: ", err);
          },
        });
      }
      function ajaxPost() {
        const form = document.forms["register"];
        const dataPack = {
          name: form.name.value,
          gender: form.gender.value,
        };

        $.ajax({
          type: "post",
          url: "/ajaxPostTest",
          data: dataPack,
          success: function (comp) {
            console.log(comp);
            resBox.textContent = `POST /ajax 요청완료! ${dataPack.name}의 성별은 ${dataPack.gender}입니다.`;
          },
          fail: function (err) {
            console.log(err);
          },
        });
      }

      //axios 함수. await을 쓸 때는 axioGet 앞에 async
      async function axiosGet() {
        const form = document.forms["register"];
        const dataPack = {
          name: form.name.value,
          gender: form.gender.value,
        };

        //유효성 검사
        //조금 다르다. checkValidity()
        //required가 있으면 기입이 되었는지 안 되었는지 검사해준다.
        //참, 거짓을 반환한다.
        //required가 없으면 무조건 true를,
        //required가 있으면 기입 여부에 따라 true 또는 false가 나온다.
        console.log(form.name.checkValidity()); //value에 걸면 안 된다.
        console.log(form.gender[0].checkValidity()); //인덱스도 지정해야 한다. required가 걸린 태그의 인덱스를 지정한다.

        if (!form.name.checkValidity()) {
          resBox.innerText = "이름을 입력해주세요.";
          resBox.innerText = form.name.validationMessage; //이걸로도 경고할 수 있다.
        } else if (!form.gender[0].checkValidity()) {
          resBox.innerText = "이름을 입력해주세요.";
          resBox.innerText = form.gender[0].validationMessage; //이걸로도 경고할 수 있다.
        }

        //axios로 보내기
        //promise를 이용한다.
        //   axios({
        //     method: "get",
        //     url: "/axiosGetTest",
        //     params: dataPack, //get 요청일 때는 params에 담아서 요청
        //   })
        //     .then((response) => {
        //       console.log(response);
        //       // console.log(response.data);
        //       // console.log(response.status);
        //       // console.log(response.statusText);
        //       // console.log(response.headers);
        //       // console.log(response.config);

        //       resBox.textContent = `GET /axiosGetText 요청 완료! ${response.data.name}의 성별은 ${response.data.gender}`;
        //       resBox.style.color = "rosybrown";
        //     })
        //     .catch((error) => {
        //       console.error("warning warning");
        //       console.log(error);
        //     });
        //async 사용
        //error 처리를 try catch 문을 사용해서 처리해줘야 한다.
        //   try {
        //           const response = await axios({
        //             method: "get",
        //             url: `/axiosGetTest?name=${dataPack.name}&gender=${dataPack.gender}`,
        //           });
        //           console.log(response);
        //           const { name, gender } = response.data;
        //           resBox.textContent = `GET /axiosGetText 요청 완료! ${response.data.name}의 성별은 ${response.data.gender}`;
        //                 resBox.style.color = "rosybrown";
        //         } catch (err) {
        //           console.log(err);
        //         }
      }

      async function axiosPost() {
        const form = document.forms["register"];
        const data = {
          yourName: form.name.value,
          yourGender: form.gender.value,
        };

        try {
          const res = await axios({
            method: "post",
            url: "/axiosPostTest",
            dataPack: data,
          });
          console.log(res);
          console.log("실제 데이터: ", res.data);
          const { name: 이름, gender: 성별 } = res.data;
          resBox.textContent = `POST axios 요청 완료! ${이름}의 성별은 ${성별}입니다.`;
        } catch (err) {
          console.error(err);
        }
      }

      console.log("fetch------------------------------");

      function fetchGet() {
        const form = document.forms["register"];

        const data = {
          who: form.name.value,
          sex: form.gender.value,
        };
        //첫 번째 인자는 url. 어디로 보낼 것인가. 임의로 정하면 된다. 다만 쿼리 부분은 막 하면 안 되고 데이터에 맞춰서
        //fetch는 디폴트 전송방식이 get이다. 그래서 두 번째 인자를 생략해도 괜찮다.
        fetch(`/fetchGetTest?name=${data.who}&gender=${data.sex}`, {
          method: "get",
        })
          .then((response) => {
            console.log(response); //이렇게 전달해주는 것이 맞다.
            resBox.textContent = `GET /fetchGetTest 요청 완료! ${response.who}의 성별은 ${response.sex}`;
            return response.text(); //response 값을 찾기 위해. 정확히는 서버에서 넘어온 문자열을 뽑아내기 위해 사용
          })
          .then((str) => {
            console.log(str);
          })
          .catch((err) => {
            console.error("error: ", err);
          });
      }
      async function fetchPost() {
        const form = document.forms["register"];
        const dataPack = {
          who: form.name.value,
          sex: form.gender.value,
        };

        try {
          //fetch는 시간이 걸리니 await을 걸어준다.
          const res = await fetch("/fetchPostTest", {
            method: "post",
            body: JSON.stringify(dataPack), //json으로 바꿔서 보내줘야 한다.
            headers: {
              "Content-Type": "application/json",
            },
          });
          console.log(res);

          //json, text 시간이 걸리는 작업
          const result = await res.json();
          console.log(result);
          const { name, gender } = result;
          resBox.textContent = `POST /fetchPostTest 요청 완료! ${name}의 성별은${gender}`;
          resBox.style.color = "skyblue";
        } catch (err) {
          console.log(err);
        }
      }
    </script>
  </body>
</html>
