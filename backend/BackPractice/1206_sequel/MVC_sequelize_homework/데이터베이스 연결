models/index.js
app.js
config.json
이 세 가지가 필요.

1. config.json

여기에는 데이터베이스 정보가 담겨있다.
host, username, password, database, dialect(어떤 DB브랜드를 쓸 건지)
이 네 가지를 내가 쓰는 이름으로 바꿔줘야 한다.
수업 때는 맨 위의 development(개발환경 설정이라고 한다)만 빼고 객체 안의
내용들을 다 지웠다.

2. models/index.js

여기에는 처음 만들 때부터 기본 세팅이 다 되어 있다.
수업 때는 다른 모듈들을 거의 다 지우고 Sequelize, config, db(빈 객체),
맨 밑의 db.sequelize = sequelize하고
db.Sequelize = Sequelize 정도만 남겨놨다.
당연히 지우기만 하지 말고 조금씩 바꿔야 한다.
단순하게 말하면,
sequelize와 config.json 모듈들을 불러오고, 
sequelize에 Sequelize 객체를 불러와서 config에 있는 데이터베이스
정보들을 담고,
db 빈 객체 안에 그 정보들을 넣어주고 있다.
점 표기법은 키와 값을 불러올 때 많이 쓰기는 하지만,
키 값을 만들어서 그 안에 값을 넣을 때도 쓸 수 있다.
Sequelize도 마찬가지.
작은 시퀄은 데이터베이스 정보를 담고 있고,
큰 시퀄은 시퀄의 내장 함수를 담고 있다.
요약: 데이터베이스 정보와 함수를 담아 app.js에서 쓰기 위한 것.

db.User = require("./User")(sequelize, Sequelize);
이런 식으로 models에 있는 데이터베이스도 불러와야 한다.
이게 없으면 sequelize 내장 함수도 인식 못한다.

3.app.js

require로 models 안의 모듈을 불러온다. index는 생략 가능.
변수 이름은 뭘 해도 상관없겠지만, 수업 때는 db라는 변수에 담았다.
시퀄의 내장함수인 sync()를 사용해서 데이터베이스를 연결한다.
sync안에 인자로 {force:}를 넣을 수 있는데, 
true => 기존에 같은 이름의 테이블이 있다면, 기존 테이블을 지우고 
새로 만든다.
false => 기존에 같은 이름의 테이블이 있다면 해당 테이블을 사용하고,
없다면 만든다. 이쪽이 더 좋다.
비동기 방식으로 사용할 수 있어서 then catch문을 사용할 수 있다.
뒤에 then 함수에 익명함수를 넣고, 연결이 성공하면 어떤 내용을 실행할지 
적어준다. 