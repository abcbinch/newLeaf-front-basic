
app.js에서 필요한 것
;const forRouting = require("./routes/login"); 
//라우팅을 위해서 필요한 부분.
//'routes' 폴더 안에 있는 것들을 불러온다는 의미인 것 같다.
; app.use("/", forRouting);
라우팅 주소만 적은 뒤, 두 번째 인수로 모듈을 담은 변수명을 적는다.
get이나 post가 아니라 use로 적어야 한다!

※작성할 때 어디에 뭘 어떻게 써야 할지 헷갈린다면,
일단 원래 작성하던대로 작성한 다음 분리하는 것도 방법이다.


예시) app.get('/', (req, res)=>{
    res.render('index',{
        userInfo: form.name.value,
    });
})

View
: 눈에 보이는 부분. 프론트. 페이지 디자인 및 데이터 바인딩을 담당하는 부분.
 컨트롤러를 통해 모델과 교류.
;  res.render('index');
 이 부분을 담당한다

Model
: 백엔드. 데이터 베이스의 데이터를 불러오고 관리하는 부분.
1129 기준 아직 데이터 베이스 연결하는 법을 배우지 않았기 때문에,
객체 또는 배열을 model 폴더에 보관했다.
컨트롤러를 통해 뷰와 교류. 
; { userInfo: form.name.value }
이 부분을 담당한다.
데이터베이스를 불러와야 한다.
데이터를 내보내야 한다.

Controller
: 경로를 설정한다. 무엇이 보일지를 결정한다.
; (req, res)=>{
;     res.render('index')}
이 부분을 담당한다.
모델(데이터)을 불러와야 한다.
;const userLogin = require("../model/User");
각 함수들을 exports를 통해 내보내야 한다.

Routes
: 뷰와 모델을 이어준다. 주소만 설정해준다.
; app.js('/')
이 부분을 담당한다.
컨트롤러를 불러와야 한다.
라우터를 내보내야 한다.


view - model - controller - routes 
순서대로 작성하는 게 좋을 것 같다.

exports는 문법의 일종이다.
exports는 함수를 내보내기 위해서 사용한다.
객체 같은 게 아니라 그냥 문법. for문 if 문처럼.
점(.)으로 이어야 한다.


